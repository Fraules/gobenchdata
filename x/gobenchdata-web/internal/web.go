// Code generated by fileb0x at "2019-04-27 17:24:42.964797 -0700 PDT m=+0.002028302" from config file "b0x.yml" DO NOT EDIT.
// modification hash(006597379ce6f2a2c44a7e8fad04af48.7b3d58d2f57b7adf38b543ead1f45052)

package internal

import (
	"bytes"

	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileWebAppJs is "web/app.js"
var FileWebAppJs = []byte("\x2f\x2f\x20\x54\x4f\x44\x4f\x0a")

// FileWebIndexHTML is "web/index.html"
var FileWebIndexHTML = []byte("\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x68\x74\x6d\x6c\x3e\x0a\x3c\x68\x74\x6d\x6c\x20\x6c\x61\x6e\x67\x3d\x22\x65\x6e\x22\x3e\x0a\x20\x20\x3c\x68\x65\x61\x64\x3e\x0a\x20\x20\x20\x20\x3c\x6d\x65\x74\x61\x20\x63\x68\x61\x72\x73\x65\x74\x3d\x22\x75\x74\x66\x2d\x38\x22\x20\x2f\x3e\x0a\x20\x20\x20\x20\x3c\x73\x63\x72\x69\x70\x74\x20\x73\x72\x63\x3d\x22\x68\x74\x74\x70\x73\x3a\x2f\x2f\x63\x64\x6e\x2e\x6a\x73\x64\x65\x6c\x69\x76\x72\x2e\x6e\x65\x74\x2f\x6e\x70\x6d\x2f\x63\x68\x61\x72\x74\x2e\x6a\x73\x40\x32\x2e\x38\x2e\x30\x22\x3e\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x0a\x20\x20\x20\x20\x3c\x6c\x69\x6e\x6b\x20\x72\x65\x6c\x3d\x22\x73\x68\x6f\x72\x74\x63\x75\x74\x20\x69\x63\x6f\x6e\x22\x20\x68\x72\x65\x66\x3d\x22\x25\x50\x55\x42\x4c\x49\x43\x5f\x55\x52\x4c\x25\x2f\x66\x61\x76\x69\x63\x6f\x6e\x2e\x69\x63\x6f\x22\x20\x2f\x3e\x0a\x20\x20\x20\x20\x3c\x6d\x65\x74\x61\x0a\x20\x20\x20\x20\x20\x20\x6e\x61\x6d\x65\x3d\x22\x76\x69\x65\x77\x70\x6f\x72\x74\x22\x0a\x20\x20\x20\x20\x20\x20\x63\x6f\x6e\x74\x65\x6e\x74\x3d\x22\x77\x69\x64\x74\x68\x3d\x64\x65\x76\x69\x63\x65\x2d\x77\x69\x64\x74\x68\x2c\x20\x69\x6e\x69\x74\x69\x61\x6c\x2d\x73\x63\x61\x6c\x65\x3d\x31\x2c\x20\x73\x68\x72\x69\x6e\x6b\x2d\x74\x6f\x2d\x66\x69\x74\x3d\x6e\x6f\x22\x0a\x20\x20\x20\x20\x2f\x3e\x0a\x20\x20\x20\x20\x3c\x73\x63\x72\x69\x70\x74\x20\x73\x72\x63\x3d\x22\x68\x74\x74\x70\x73\x3a\x2f\x2f\x63\x64\x6e\x2e\x6a\x73\x64\x65\x6c\x69\x76\x72\x2e\x6e\x65\x74\x2f\x6e\x70\x6d\x2f\x63\x68\x61\x72\x74\x2e\x6a\x73\x40\x32\x2e\x38\x2e\x30\x22\x3e\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x0a\x20\x20\x20\x20\x3c\x6d\x65\x74\x61\x20\x6e\x61\x6d\x65\x3d\x22\x74\x68\x65\x6d\x65\x2d\x63\x6f\x6c\x6f\x72\x22\x20\x63\x6f\x6e\x74\x65\x6e\x74\x3d\x22\x23\x30\x30\x30\x30\x30\x30\x22\x20\x2f\x3e\x0a\x0a\x20\x20\x20\x20\x3c\x74\x69\x74\x6c\x65\x3e\x7b\x7b\x2e\x54\x69\x74\x6c\x65\x7d\x7d\x3c\x2f\x74\x69\x74\x6c\x65\x3e\x0a\x20\x20\x3c\x2f\x68\x65\x61\x64\x3e\x0a\x0a\x20\x20\x3c\x62\x6f\x64\x79\x3e\x0a\x20\x20\x20\x20\x3c\x64\x69\x76\x3e\x0a\x20\x20\x20\x20\x20\x20\x3c\x63\x61\x6e\x76\x61\x73\x20\x69\x64\x3d\x22\x6d\x79\x43\x68\x61\x72\x74\x22\x3e\x3c\x2f\x63\x61\x6e\x76\x61\x73\x3e\x0a\x20\x20\x20\x20\x3c\x2f\x64\x69\x76\x3e\x0a\x0a\x20\x20\x20\x20\x3c\x73\x63\x72\x69\x70\x74\x20\x74\x79\x70\x65\x3d\x22\x6d\x6f\x64\x75\x6c\x65\x22\x3e\x0a\x20\x20\x20\x20\x20\x20\x76\x61\x72\x20\x63\x74\x78\x20\x3d\x20\x64\x6f\x63\x75\x6d\x65\x6e\x74\x2e\x67\x65\x74\x45\x6c\x65\x6d\x65\x6e\x74\x42\x79\x49\x64\x28\x27\x6d\x79\x43\x68\x61\x72\x74\x27\x29\x2e\x67\x65\x74\x43\x6f\x6e\x74\x65\x78\x74\x28\x27\x32\x64\x27\x29\x3b\x0a\x20\x20\x20\x20\x20\x20\x76\x61\x72\x20\x63\x68\x61\x72\x74\x20\x3d\x20\x6e\x65\x77\x20\x43\x68\x61\x72\x74\x28\x63\x74\x78\x2c\x20\x7b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2f\x2f\x20\x54\x68\x65\x20\x74\x79\x70\x65\x20\x6f\x66\x20\x63\x68\x61\x72\x74\x20\x77\x65\x20\x77\x61\x6e\x74\x20\x74\x6f\x20\x63\x72\x65\x61\x74\x65\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x74\x79\x70\x65\x3a\x20\x27\x6c\x69\x6e\x65\x27\x2c\x0a\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2f\x2f\x20\x54\x68\x65\x20\x64\x61\x74\x61\x20\x66\x6f\x72\x20\x6f\x75\x72\x20\x64\x61\x74\x61\x73\x65\x74\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x64\x61\x74\x61\x3a\x20\x7b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x6c\x61\x62\x65\x6c\x73\x3a\x20\x5b\x27\x4a\x61\x6e\x75\x61\x72\x79\x27\x2c\x20\x27\x46\x65\x62\x72\x75\x61\x72\x79\x27\x2c\x20\x27\x4d\x61\x72\x63\x68\x27\x2c\x20\x27\x41\x70\x72\x69\x6c\x27\x2c\x20\x27\x4d\x61\x79\x27\x2c\x20\x27\x4a\x75\x6e\x65\x27\x2c\x20\x27\x4a\x75\x6c\x79\x27\x5d\x2c\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x64\x61\x74\x61\x73\x65\x74\x73\x3a\x20\x5b\x7b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x6c\x61\x62\x65\x6c\x3a\x20\x27\x4d\x79\x20\x46\x69\x72\x73\x74\x20\x64\x61\x74\x61\x73\x65\x74\x27\x2c\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x62\x61\x63\x6b\x67\x72\x6f\x75\x6e\x64\x43\x6f\x6c\x6f\x72\x3a\x20\x27\x72\x67\x62\x28\x32\x35\x35\x2c\x20\x39\x39\x2c\x20\x31\x33\x32\x29\x27\x2c\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x62\x6f\x72\x64\x65\x72\x43\x6f\x6c\x6f\x72\x3a\x20\x27\x72\x67\x62\x28\x32\x35\x35\x2c\x20\x39\x39\x2c\x20\x31\x33\x32\x29\x27\x2c\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x64\x61\x74\x61\x3a\x20\x5b\x30\x2c\x20\x31\x30\x2c\x20\x35\x2c\x20\x32\x2c\x20\x32\x30\x2c\x20\x33\x30\x2c\x20\x34\x35\x5d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x7d\x5d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x7d\x2c\x0a\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2f\x2f\x20\x43\x6f\x6e\x66\x69\x67\x75\x72\x61\x74\x69\x6f\x6e\x20\x6f\x70\x74\x69\x6f\x6e\x73\x20\x67\x6f\x20\x68\x65\x72\x65\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x6f\x70\x74\x69\x6f\x6e\x73\x3a\x20\x7b\x7d\x0a\x20\x20\x20\x20\x20\x20\x7d\x29\x3b\x0a\x20\x20\x20\x20\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x0a\x20\x20\x3c\x2f\x62\x6f\x64\x79\x3e\x0a\x3c\x2f\x68\x74\x6d\x6c\x3e\x0a")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	err = FS.Mkdir(CTX, "web/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	var f webdav.File

	f, err = FS.OpenFile(CTX, "web/app.js", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = f.Write(FileWebAppJs)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "web/index.html", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = f.Write(FileWebIndexHTML)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
